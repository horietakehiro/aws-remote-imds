version: 0.2

batch:
  fast-fail: true
  build-graph:
    - identifier: ubuntu_amd64
      env:
        image: aws/codebuild/standard:6.0
        variables:
          BUILD_ID: ubuntu_amd64
          OS_NAME: ubuntu
          ARCH_NAME: amd64
      ignore-failure: false
    - identifier: amazonlinux2_amd64
      env:
        image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
        variables:
          BUILD_ID: amazonlinux2_amd64
          OS_NAME: amazonlinux2
          ARCH_NAME: amd64
      ignore-failure: false
    # - identifier: amazonlinux2_arm64
    #   env:
    #     type: ARM_CONTAINER
    #     image: aws/codebuild/amazonlinux2-aarch64-standard:2.0
    #     variables:
    #       BUILD_ID: amazonlinux2_arm64
    #       OS_NAME: amazonlinux2
    #       ARCH_NAME: arm64
    #   ignore-failure: false
    - identifier: git_push
      buildspec: deployments/cdk/buildspec_git.yaml
      depend-on:
        # - amazonlinux2_arm64
        - amazonlinux2_amd64
        - ubuntu_amd64
      env:
        variables:
          BUILD_ID: git_push
      ignore-failure: false


env:
  shell: bash
  variables:
    PROJECT_NAME: aws-remote-imds
    APP_NAME: ec2-remote-imds
    PUBLIC_BUCKET: public-artifact-bucket-382098889955-ap-northeast-1

    OS_NAME: amazonlinux2
    ARCH_NAME: amd64

  parameter-store:
    GITHUB_TOKEN: /GitHub/MyToken

phases:
  install:
    on-failure: ABORT
    runtime-versions:
      golang: latest
    commands:
      # - echo `cdk --version`
      - echo `go version`
      - go install github.com/jstemmer/go-junit-report/v2@latest

  pre_build:
    on-failure: ABORT
    commands:
      - docker-compose -f tool/ec2/docker-compose.yaml up -d
      - go test -v 2>&1 ./... | go-junit-report > ut-report-${OS_NAME}-${ARCH_NAME}.xml

  build:
    on-failure: ABORT
    commands:
      - go build -o bin/${OS_NAME}/${ARCH_NAME}/${APP_NAME} ./cmd/ec2/
      # - cd deployments/cdk/ && cdk synth --no-version-reporting --no-path-metadata
  
  post_build:
    on-failure: ABORT
    commands:
      - aws s3 cp bin/${OS_NAME}/${ARCH_NAME}/${APP_NAME} s3://${PUBLIC_BUCKET}/${PROJECT_NAME}/latest/${OS_NAME}/${ARCH_NAME}/
      - aws s3 cp scripts/ec2/${OS_NAME}/${ARCH_NAME}/install.sh s3://${PUBLIC_BUCKET}/${PROJECT_NAME}/latest/${OS_NAME}/${ARCH_NAME}/

reports:
  UnitTestReports:
    files:
      - ut-report-${OS_NAME}-${ARCH_NAME}.xml
    file-format: JUNITXML